# World.py: defines the links between the levels generated by level_generator
# why have configuration files when you can put this stuff right in the source?

import random
import sprites as spr

from my_geom import box2d
from level import Level
from level_generators import generate_dungeon, generate_shop
from objects import Item, Portal
import default_items
import item_actions

WELL_DEPTH = 20

town = Level(25, 25, name="town")
well = [generate_dungeon(13+min(12,i), 13+min(12,i), i+1) for i in range(100)]
shop = []

town.illuminated = True
town.generate_town()
town.add_item((12,12), Item(spr.WELL, name="well of doom", holdable=False))

default_items.general = [
	Item(spr.TORCH, name="torch", value=20, luminosity=3),
	Item(spr.LANTERN, name="lantern", value=800, luminosity=5),
	Item(spr.POTION_RED, name="lesser health potion", value=15,
		desc="In[v]oking it will heal 10 HP.",
		action=item_actions.heal_target(10),
		),
	Item(spr.SCROLL, name="town portal scroll", value=50,
		desc="In[v]oking it will return the user to town after channeling.",
		action=item_actions.tp_target_to(town, 12, 12),
		),
	Item(spr.ESSENCE, name="luminescent sphere", value=4000, luminosity=999),
]

# cheat items
# change to true for cheating
if False:
	town.add_item((11,11), Item(spr.WATER, name="lapis lazuli", value=90019001))
	town.add_item((13,13),
		Item(spr.TRIFORCE, name="triforce", value=0, luminosity=25, equippable=True,
			attr={
			'attack_damage': (9000,9001),
			'attack_haste': 0.4,
			'movement_haste': 0.4,
			'health': 90001,
			}),
	)

# For each shop, generate it, a position for it on the town, then put it there
for loc in random.sample(town.get_main_region(), 16):
	x,y = loc

	shop_type = random.randint(0, 2)

	if shop_type == 0:
		# General store
		shop_items = default_items.general
		shop_img = spr.SHOP
		shop_name = "general store"

	elif shop_type == 1:
		# Weapon shop
		shop_items = default_items.weapons
		shop_img = spr.SHOP_WEAPONS
		shop_name = "weapon shop"

	elif shop_type == 2:
		# Armor shop
		shop_items = default_items.armors
		shop_img = spr.SHOP_ARMOR
		shop_name = "armor shop"

	new_shop = generate_shop(16, 16, shop_items)

	shop.append(new_shop)
	
	# add portal to shop from town
	town.add_item((x,y), Item(shop_img, name=shop_name, holdable=False))
	town.portals[(x,y)] = Portal(new_shop, 1, 1, name="the "+shop_name)

	# add portal to town from shop
	new_shop.add_item((1,1), Item(spr.DOOR, holdable=False))
	new_shop.portals[(1,1)] = Portal(town, x, y, name="the town")

# Add portals to dungeon
for i in range(WELL_DEPTH):
	mr = well[i].get_main_region()

	to_up, to_down = random.sample(mr, 2)
	if i == 0:
		well[i].add_item(to_up, Item(spr.ROPE_UP, holdable=False))
		well[i].add_item(to_down, Item(spr.WELL, holdable=False))
		well[i].portals[to_up] = Portal(town, 12, 12)
		town.portals[(12,12)] = Portal(well[0], *to_up, name="the well of doom")
	elif i == WELL_DEPTH-1:
		well[i].add_item(to_up, Item(spr.ROPE_UP, holdable=False))
		well[i].add_item(to_down, Item(spr.TRIFORCE, name="triforce", value=0, luminosity=8, equippable=True,
			attr={
			'attack_damage': (50,200),
			'attack_haste': 0.4,
			'movement_haste': 0.4,
			'health': 9001,
			}),
		)
		well[i-1].portals[prev_down] = Portal(well[i], *to_up, name="well level %d" % (i+1))
		well[i].portals[to_up] = Portal(well[i-1], *prev_down, name="well level %d" % i)
	else:
		well[i].add_item(to_up, Item(spr.ROPE_UP, holdable=False))
		well[i].add_item(to_down, Item(spr.WELL, holdable=False))
		well[i-1].portals[prev_down] = Portal(well[i], *to_up, name="well level %d" % (i+1))
		well[i].portals[to_up] = Portal(well[i-1], *prev_down, name="well level %d" % i)
	prev_up = to_up
	prev_down = to_down

town.portals[(5, 5)] = Portal(shop[0], 1, 1, "the humble shop")